// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc/proto/account/account.proto

/*
Package onestory_account_proto is a generated protocol buffer package.

It is generated from these files:
	grpc/proto/account/account.proto

It has these top-level messages:
	FullAccount
	SafeAccount
	RequestQuery
	RequestLogin
	Request
	Response
	ResponseSafe
*/
package onestory_account_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountService interface {
	InsertAccountInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseSafe, error)
	UpdateAccountInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetAccountInfo(ctx context.Context, in *RequestQuery, opts ...client.CallOption) (*ResponseSafe, error)
	LoginAccount(ctx context.Context, in *RequestLogin, opts ...client.CallOption) (*ResponseSafe, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "onestory.account.proto"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) InsertAccountInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseSafe, error) {
	req := c.c.NewRequest(c.name, "AccountService.InsertAccountInfo", in)
	out := new(ResponseSafe)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAccountInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateAccountInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetAccountInfo(ctx context.Context, in *RequestQuery, opts ...client.CallOption) (*ResponseSafe, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetAccountInfo", in)
	out := new(ResponseSafe)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) LoginAccount(ctx context.Context, in *RequestLogin, opts ...client.CallOption) (*ResponseSafe, error) {
	req := c.c.NewRequest(c.name, "AccountService.LoginAccount", in)
	out := new(ResponseSafe)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	InsertAccountInfo(context.Context, *Request, *ResponseSafe) error
	UpdateAccountInfo(context.Context, *Request, *Response) error
	GetAccountInfo(context.Context, *RequestQuery, *ResponseSafe) error
	LoginAccount(context.Context, *RequestLogin, *ResponseSafe) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) {
	type accountService interface {
		InsertAccountInfo(ctx context.Context, in *Request, out *ResponseSafe) error
		UpdateAccountInfo(ctx context.Context, in *Request, out *Response) error
		GetAccountInfo(ctx context.Context, in *RequestQuery, out *ResponseSafe) error
		LoginAccount(ctx context.Context, in *RequestLogin, out *ResponseSafe) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) InsertAccountInfo(ctx context.Context, in *Request, out *ResponseSafe) error {
	return h.AccountServiceHandler.InsertAccountInfo(ctx, in, out)
}

func (h *accountServiceHandler) UpdateAccountInfo(ctx context.Context, in *Request, out *Response) error {
	return h.AccountServiceHandler.UpdateAccountInfo(ctx, in, out)
}

func (h *accountServiceHandler) GetAccountInfo(ctx context.Context, in *RequestQuery, out *ResponseSafe) error {
	return h.AccountServiceHandler.GetAccountInfo(ctx, in, out)
}

func (h *accountServiceHandler) LoginAccount(ctx context.Context, in *RequestLogin, out *ResponseSafe) error {
	return h.AccountServiceHandler.LoginAccount(ctx, in, out)
}
